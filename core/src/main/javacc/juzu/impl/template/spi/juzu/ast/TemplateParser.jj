options
{
   TOKEN_EXTENDS = "OffsetToken";
}

PARSER_BEGIN(TemplateParser)

package juzu.impl.template.spi.juzu.ast;

import java.util.ArrayList;
import juzu.impl.common.Location;
import juzu.impl.common.Coordinate;
import juzu.impl.common.Tools;
import java.util.HashMap;
import java.util.LinkedList;

/** Simple brace matcher. */
public class TemplateParser {

  /** . */
  public LinkedList<ArrayList<ASTNode.Block<?>>> list = new LinkedList<ArrayList<ASTNode.Block<?>>>();

  /** . */
  private LinkedList<TagOpen> tagStack = new LinkedList<TagOpen>();

  private static class TagOpen {

     /** . */
     private final String name;

     /** . */
     private final Coordinate begin;

     /** . */
     private final Coordinate end;

     /** . */
     private final HashMap<String, String> args;

     TagOpen(String name, Coordinate begin, Coordinate end, HashMap<String, String> args)
     {
        this.name = name;
        this.begin = begin;
        this.args = args;
        this.end = end;
     }
  }

  private CharSequence foo(int beginOffset, int endOffset)
  {
     return ((OffsetTokenManager)token_source).getStream().getData().subSequence(beginOffset, endOffset);
  }

  private ArrayList<ASTNode.Block<?>> bar(ArrayList<ASTNode.Block<?>> input, Coordinate first, Coordinate last)
  {
     ArrayList<ASTNode.Block<?>> blocks = new ArrayList<ASTNode.Block<?>>();
     Coordinate previous = first;
     for (ASTNode.Block<?> block : input)
     {
        if (block.getBeginOffset() > previous.getOffset())
        {
           blocks.add(new ASTNode.Section(
              previous,
              new Coordinate(block.getEndOffset(), block.getEndPosition()),
              SectionType.STRING,
              foo(previous.getOffset(), block.getBeginOffset()).toString()));
        }
        blocks.add(block);
        previous = block.getEnd();
     }
     if (previous.getOffset() < token.endOffset)
     {
        blocks.add(new ASTNode.Section(
           previous,
           last,
           SectionType.STRING,
           foo(previous.getOffset(), last.getOffset()).toString()));
     }
     return blocks;
  }
}

PARSER_END(TemplateParser)

<DEFAULT> TOKEN :
{
< OPEN_SCRIPTLET : "<%" > : IN_SCRIPTLET |
< OPEN_EXPR : "<%=" > : IN_EXPR |
< OPEN_CURLY_EXPR : "${" > : IN_CURLY_EXPR |
< OPEN_URL : "@{" > : IN_URL |
< OPEN_START_OR_EMPTY_TAG : "#{" > : IN_START_OR_EMPTY_TAG |
< STOP_TAG : "#{/" ["$","A"-"Z","_","a"-"z"] ( ["$","0"-"9","A"-"Z","_","a"-"z"] ) * "}" > |
< DATA : ~[] >
}

<IN_SCRIPTLET> TOKEN :
{
< CLOSE_SCRIPTLET : "%>" > : DEFAULT |
< SCRIPTLET_DATA : ~[] >
}

<IN_EXPR> TOKEN :
{
< CLOSE_EXPR : "%>" > : DEFAULT |
< EXPR_DATA : ~[] >
}

<IN_CURLY_EXPR> TOKEN :
{
< CLOSE_CURLY_EXPR : "}" > : DEFAULT |
< CURLY_EXPR_DATA : ~[] >
}

<IN_URL> TOKEN :
{
< METHOD_NAME : ["$","A"-"Z","_","a"-"z"] ( ["$","0"-"9","A"-"Z","_","a"-"z"] ) * > |
< DOT : "." > |
< OPEN_METHOD : "(" > : IN_URL_ARGS |
< CLOSE_URL : "}" > : DEFAULT
}

<IN_URL_ARGS> TOKEN :
{
< ARG_SEPARATOR : "," > |
< ARG_NAME : ["$","A"-"Z","_","a"-"z"] ( ["$","0"-"9","A"-"Z","_","a"-"z"] ) * > |
< ARG_VALUE : "=" ( ~[",",")"] ) + > |
< CLOSE_METHOD : ")" > : IN_URL
}

<IN_URL_ARGS> SKIP :
{
" " | "\t"
}

<IN_START_OR_EMPTY_TAG> TOKEN :
{
< START_OR_EMPTY_TAG_NAME : ["$","A"-"Z","_","a"-"z"] ( ["$","0"-"9","A"-"Z","_","a"-"z"] ) * > |
< ENTER_START_OR_EMPTY_TAG_ARGS : " " > : IN_START_OR_EMPTY_TAG_ARGS |
< CLOSE_START_OR_EMPTY_TAG : "}" | "/}" > : DEFAULT
}

<IN_START_OR_EMPTY_TAG_ARGS> TOKEN :
{
< START_OR_EMPTY_TAG_ARG_NAME : ["$","A"-"Z","_","a"-"z"] ( ["$","0"-"9","A"-"Z","_","a"-"z"] ) * > |
< START_OR_EMPTY_TAG_ARG_EQ : "=" > : IN_START_OR_EMPTY_TAG_VALUE |
< CLOSE_START_OR_EMPTY_TAG_ARGS : "}" | "/}" > : DEFAULT
}

<IN_START_OR_EMPTY_TAG_ARGS> SKIP :
{
" " | "\t"
}

<IN_START_OR_EMPTY_TAG_VALUE> TOKEN :
{
< START_OR_EMPTY_TAG_ARG_VALUE : ( ( ( ~[" ","}","/"] ) + ) | ( "'" ( ~["'"] ) * "'" ) | ( "\"" ( ~["\""] ) * "\"" ) ) > : IN_START_OR_EMPTY_TAG_ARGS
}

<IN_START_OR_EMPTY_TAG_VALUE> SKIP :
{
" " | "\t"
}

< * > TOKEN :
{
< UNEXPECTED_CHAR : ~[] >
}

ASTNode.Template parse() : { list.addLast(new ArrayList<ASTNode.Block<?>>()); }
{
  (
     parseScriptlet() |
     parseExpression() |
     parseCurlyExpression() |
     parseURL() |
     parseStartOrEmptyTag() |
     parseStopTag() |
     <DATA>
  ) *
  {
     ArrayList<ASTNode.Block<?>> blocks = bar(list.getFirst(), new Coordinate(0, new Location(1, 1)), token.getEnd());
     ASTNode.Template template = new ASTNode.Template();
     template.addChildren(blocks);
     return template;
  }
}

void parseScriptlet() : { Token o,t,p; StringBuilder acc = new StringBuilder(); }
{
   o = <OPEN_SCRIPTLET> ( t = <SCRIPTLET_DATA> { acc.append(t.image.charAt(0)); } ) * p = <CLOSE_SCRIPTLET>
   {
      list.getLast().add(new ASTNode.Section(
         o.getBegin(),
         p.getEnd(),
         SectionType.SCRIPTLET,
         acc.toString()));
   }
}

void parseExpression() : { Token o,t,p; StringBuilder acc = new StringBuilder(); }
{
   o = <OPEN_EXPR> ( t = <EXPR_DATA> { acc.append(t.image.charAt(0)); } ) * p = <CLOSE_EXPR>
   {
      list.getLast().add(new ASTNode.Section(
         o.getBegin(),
         p.getEnd(),
         SectionType.EXPR,
         acc.toString()));
   }
}

void parseCurlyExpression() : { Token o,t,p; StringBuilder acc = new StringBuilder(); }
{
   o = <OPEN_CURLY_EXPR> ( t = <CURLY_EXPR_DATA> { acc.append(t.image.charAt(0)); } ) * p = <CLOSE_CURLY_EXPR>
   {
      list.getLast().add(new ASTNode.Section(
         o.getBegin(),
         p.getEnd(),
         SectionType.EXPR,
         acc.toString()));
   }
}

void parseURL() : { Token t,m,p,tn = null; HashMap.SimpleEntry a; HashMap args = new HashMap(); }
{
   t = <OPEN_URL> ( tn = <METHOD_NAME> <DOT> ) ? m = <METHOD_NAME> <OPEN_METHOD>
      ( a = parseArg() { args.put(a.getKey(), a.getValue());  } ( <ARG_SEPARATOR> a = parseArg() { args.put(a.getKey(), a.getValue()); }  ) * ) ?
   <CLOSE_METHOD> p = <CLOSE_URL>
   {
      String s = args.toString();
      list.getLast().add(new ASTNode.URL(
         t.getBegin(),
         p.getEnd(),
         tn != null ? tn.image : null,
         m.image,
         args));
   }
}

HashMap.SimpleEntry parseArg() : { Token n,v; }
{
   n = <ARG_NAME> v = <ARG_VALUE>
   {
      return new HashMap.SimpleEntry(n.image.trim(),v.image.substring(1).trim());
   }
}

void parseStartOrEmptyTag() : { Token t,u,c,v,z = null; HashMap<String, String> args = new HashMap<String, String>(); }
{
   z = <OPEN_START_OR_EMPTY_TAG> u = <START_OR_EMPTY_TAG_NAME>
      (
         (
            <ENTER_START_OR_EMPTY_TAG_ARGS>
               ( t = <START_OR_EMPTY_TAG_ARG_NAME> <START_OR_EMPTY_TAG_ARG_EQ> v = <START_OR_EMPTY_TAG_ARG_VALUE>
                {
                   args.put(t.image, Tools.unquote(v.image));
                }
                ) *
            c = <CLOSE_START_OR_EMPTY_TAG_ARGS>
         ) |
         c = <CLOSE_START_OR_EMPTY_TAG>
      )
   {
      String tagName = u.image;
      if (!c.image.equals("/}"))
      {
         list.addLast(new ArrayList<ASTNode.Block<?>>());
         tagStack.add(new TagOpen(tagName, z.getBegin(), c.getEnd(), args));
      }
      else
      {
         ASTNode.Tag tag = new ASTNode.Tag(
            z.getBegin(),
            c.getEnd(),
            tagName,
            args);
         list.getLast().add(tag);
      }
   }
}

void parseStopTag() : { Token t; }
{
   t = <STOP_TAG>
   {
      if (tagStack.isEmpty())
      {
         throw new UnsupportedOperationException("Missing open tag");
      }
      String tagName = t.image.substring(3, t.image.length() - 1);
      TagOpen to = tagStack.removeLast();
      if (!to.name.equals(tagName))
      {
         throw new UnsupportedOperationException("Wrong close tag " + to.name + " != " + tagName);
      }
      ArrayList<ASTNode.Block<?>> children = list.removeLast();
      ArrayList<ASTNode.Block<?>> blocks = bar(children, to.end, t.getBegin());
      ASTNode.Tag tag = new ASTNode.Tag(
         to.begin,
         t.getEnd(),
         tagName,
         to.args);
      tag.addChildren(blocks);
      list.getLast().add(tag);
   }
}
