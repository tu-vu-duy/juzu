Juzu provides native support for Injection of Control (known as //IOC//) and relies on the specification
[[JSR-330>>http://docs.oracle.com/javaee/6/api/javax/inject/package-summary.html]] (known as //@Inject//) for providing
implementation free IOC.

Although the JSR-330 is quite small it provides the necessary ground for building Juzu applications. Juzu itself relies
on the injection container for wiring the entire Juzu runtime (controllers, templates, plugins, etc...).

We will explain how Juzu uses IOC for its runtime, we will suppose that the reader is familliar with IOC and with the @Inject
specification, in particular the notion of injection, scope and qualifier should be familliar.

= Juzu IOC =

== IOC containers ==

The JSR-330 is implemented by several projects, we refer to them as IOC containers, they are *implementations* of the
JSR-330 specification:

* [[Spring Core 3>>http://static.springsource.org/spring/docs/3.1.x/spring-framework-reference/html/]]
* Context and Dependency Injection also know as //CDI// implemented by the [[Weld>>http://seamframework.org/Weld]] project
* [[Google Guice 3>>http://code.google.com/p/google-guice/wiki/Guice30]]

Juzu is able to run with any of those implementation and leaves you the choice of the IOC implementation you want to
use.

{{note}}CDI is a specification that extends the //@Inject// specification: CDI provides more features than @Inject, however
this specification is only implemented by Weld. Nevertheless if your choice is to use CDI you will be leverage its specific
features in your Juzu application{{/note}}

== Beans ==

Beans are simply object managed by the IOC container, any bean can be injected other beans:

{{java}}
@java.inject.Inject
Service service;
{{/java}}

== Scopes ==

Scopes define how a instances of a bean are managed by the IOC container: for a given bean, shall it be instantiated
 only one time and shared or shall it instantiated everty time it is required ? that's the kind of question
 that scope answers.

Juzu provides 4 scopes to use within your application:

* ##@javax.inject.Singleton## scope: a single bean instance is the same for the whole application
* ##@juzu.RequestScoped## scope: the bean is instantiated once per request
* ##@juzu.SessionScoped## scope: the bean is instantiated once per session
* ##@juzu.FlashScoped## scope: the bean is instantiated once per request but is reused if it was instantiated during
an action request in the next render request and only in the first one

== Qualifiers ==

Qualifier are designed to distinguish several instances of a same bean. How does a bean differ from another bean ?
it's not really possible to tell, qualifiers simply answer this question, allowing to:

* distinguish beans based upon the qualifier members
* configure the bean instance for a particular usage

The JSR-330 specification provides the ##@Named## qualifier whose purpose is to give a name to a bean, for instance

{{java}}
@Named("john")
@Inject Person john;

@Named("peter")
@Inject Person peter;
{{/java}}

= Beans in action =

Beans are simply the objects managed by the IOC engine. In a Juzu applications we have several kind of beans:

* Controllers
* Template
* Application beans
* Plugin beans

== Template beans ==

Every template has a corresponding ##juzu.template.Template## class at runtime. The template class allows
applications to interact with templates, most of the time for rendering purpose:

{{java}}
template.render();
{{/java}}

A template bean is always qualified by the ##@Path## qualifier. The path qualifier is simply the value of the path
relative to the //templates// package, for instance //index.gtmpl// is a valid qualifier value. The qualifier allows
to have several ##Template## instances and distinguish them.

Templates have the ##@Singleton## scope: a single instance of the template object is created and shared in the IOC
container.

== Controller beans ==

Each controller class is turned into a bean, that's how controllers can be injected with other beans. As soon
as Juzu finds a class annotated by ##@View##, ##@Action## or ##@Resource##, it is automatically turned into a bean.

Controller have the ##Request## scope by default: every time a controller instance is required it will be created
for the duration of the request. It is possible to change the scope of a controller by annotating it with another
scope annotation managed by Juzu:

{{java}}
@SessionScoped
public class Controller {
   @View
   public void index() { }
}
{{/java}}

=== Injection a template into a controller ===

Injecting a template bean into a controller bean is probably the most common Juzu pattern:

{{java}}
@Inject
@Path("index.gtmpl")
Template index;
{{/java}}

The template can then be used for rendering purposes:

{{java}}
@View
public void index() {
   index.render();
}
{{/java}}

== Application beans ==

Application beans model the custom logic of an application, they are normally injected in controller beans that use
them when they process requests. The //binding// plugin allows an application to declare custom beans that can be used
in the application.

=== POJO bean binding ===

Binding a Plain Old Java Object (POJO) is a very simple task to accomplish:

{{java}}
@Bindings(@Binding(Mailer.class))
package myapplication;
{{/java}}

The bean will be entirely managed by the IOC container, the binding plugin will just declare it in the IOC container.
The POJO will be created when needed, for instance when it is inserted in a controller.

{{java}}
public class MyController {
   @Inject Mailer mailer;
   @Action
   public void sendMail(String recipient, String subject, String message) {
      mail.send(recipient, subject, message);
   }
}
{{/java}}

=== Abstract bean binding ===

Binding an abstract class or an interface type is also possible with the ##implementation## member of the ##@Binding##
annotation:

{{java}}
@Bindings(@Binding(value=Mailer.class,implementation=MailerImpl.class))
package myapplication;
{{/java}}

=== Binding with a provider ===

Sometimes the implementation cannot be created by the IOC container, for instance it may not have a correct
constructor, it can only be retrieved using a factory or it should be configured before being used. For such scenarios
the implementation can specify a class implementing the ##javax.inject.Provider## interface.

{{java}}
public class ConfiguredMailerProvider implements javax.inject.Provider<Mailer> {

   private String email
   private String password;

   public ConfiguredMailerProvider() {
      this.email = System.getProperty("mailer.email");
      this.password = System.getProperty("mailer.password");
   }

   public Mailer get() {
      return new MailerImpl(email, password);
   }
}
{{/java}}

Thanks to the provider, we have a ##Mailer## provider that returns a ##MailerImpl## configured before usage.

=== Beyond the provider ===

The implementation class can also be an instance of ##juzu.inject.ProviderFactory##. The provider factory
is a factory for providers whose purpose is to return a ##Provider## for a specific class. The provider factory
has the method:

{{java}}
{@javadoc juzu.inject.ProviderFactory#getProvider(java.lang.Class)}
{@include juzu.inject.ProviderFactory#getProvider(java.lang.Class)}
{{/java}}

The provider factory implementation must provide a public zero argument constructor and it will be instantiated
during the application boostrap by Juzu to obtain the provider. The returned providers will then be bound into
the IOC container.

Usually provider factories will lookup the service in a registry (like another IOC container) and returns a provider
 that return them lazily or not.

=== Scoped binding ===

The ##@Binding## annotation provides room for declaring a bean scope:

{{java}}
@Bindings(@Binding(value=Mailer.class,scope=Scope.SINGLETON))
{{/java}}

When the scope is not specified, the scope is determined from the bean or implementation that should be annotated
with a scope annotation. When it is specified, it overrides the annotation scope the bean could declare.

=== Qualifying provider ===

A provider implementation can declare qualifiers on the ##get## method they implement in order to set the qualifiers
of the returned bean:

{{java}}
public class MailerProvider implements Provider<Mailer> {
   @Named("mailer")
   public Mailer get() {
      return new MailerImpl();
   }
}
{{/java}}

This is useful for declaring qualifiers on a class that is not annotated by qualifiers, because it is not possible
to declare qualifiers in an ##@Binding## annotation due to limitations of the Java language.

