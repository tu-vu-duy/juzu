Applications are build to process request, this concept deserves an entire chapter that explains how Juzu process
http request. Request life cycle is the most important concept to get right when developping a web application,
whether it is a Juzu application or not.

= Phases =

Juzu request life cycle is composed of four phases, we will explain three of them in this chapter, the last one
will be explained in another chapter of this guide.

* The view phase : invoke the application to produce markup output aggregated within a page
* The action phase : invoke the application to process an action
* The resource phase : invoke the application to produce any kind of output as a full response (i.e not in a page)

During the execution of a phase, parameters are provided by Juzu to execute the phase. Those parameters are set
by the application itself, for instance when it creates a link. The scope of the parameters (i.e when the validity
of the parameters) depends on the phase.

== View phase ==

The view phase invokes the application for the purpose of creating markup. This phase is indempotent, it means that
repeated invocation of the same phase with the same parameters should produce the same markup (supposing than the
application does not depend on some other state, like a database that could change over time).

View parameters are associated with the current URL, it means that they are somehow persistent. For instance
you interact with an application to change its view parameters on each request and then you interact with another
application on the same page: the view parameters will remain the same accross the invocation of the view phase of the
application when the second application is used.

== Action phase ==

The action phase invokes the application for processing an action. During the invocation, action parameters are provided
and their validity is limited to the current action phase being executed, after they will not be anymore available.

The action phase is not idempotent, invoking several times an action phase could have side effects such as inserting
several times the same data in a database.

Juzu does not expect markup returned during this phase, however it provides the opportunity to configure the view
parameters of the next view phase.

== Resource phase ==

The resource phase allows the application to produce a web resource such as an image or a full page. When this phase
is invoked, a set of resources parameters are provided in the URL producing the resource.

= Interactions =

Now that we have an overview of the phase, it is time to connect them and explain the interactions between the phases.

[[image:images/request/phases.png||title="Interaction between phases" align="center" html:scale="70" fo:width="70mm]]

1. An action phase is invoked by an URL produced during a view phase, this URL contains the action parameters
1. After an action phase a view phase is executed and the view parameters are updated
1. A resource phase is invoked by anURL produced during a view phase, this URL contains the resource parameters

= Mapping onto HTTP =

As said before, phases and interactions have a natural mapping with the HTTP protocol. It is worthy to explain it because it will
 help you to understand fully the interations managed by Juzu.

== View phase ==

View phases are mapped on //GET// requests:

* The view phase is idempotent like GET
* View parameters are identified to query parameters
* The response returned by a GET request should remain identical for the same parameters

During a view phase, the application produces URL which can invoke any application phase.

[[image:images/request/interaction1.png||title="View phase" align="center" html:scale="30" fo:width="30mm]]

In this example the view phase produce markup parameterized by the ##color## parameter having the //red// value.

== Action phase ==

Action phase are created from view phase by processing a link that was found in the markup response. The action phase
is mapped on //POST// requests:

* Both action phases and POST request are not idempotent
* Action parameters are identified to form parameters
* Action phase and POST requests should not be invoked more than one time

[[image:images/request/interaction2.png||title="Action phase" align="center" html:scale="30" fo:width="30mm]]

Now let's update our example and suppose that the application returns markup with a form that invokes an action phase.
When the user submits the form it triggers the action phase, which in returns updates the ##color## view parameter of the next
 view phase to the value //blue//.

[[image:images/request/interaction3.png||title="View phase after action phase" align="center" html:scale="30" fo:width="30mm]]

The HTTP redirection will update the browser to show the next view phase with the expected view parameters.

During the action phase, the application configures the parameters of the next view phase. When the invocation of the phase
is over, the server redirects the browser (with an HTTP temporary redirection) to the next view phase URL. This URL
 contains the view parameters. This mechanism is well known as [[//Redirect After Post//>>http://fr.wikipedia.org/wiki/Post-Redirect-Get]]
 pattern and is often used to ensure that a POST request is not triggered several times when the refresh button of the
 browser is used.

== Resource phase ==

Resource phases are trivially mapped on //GET// request pretty much like a view phase. The main difference is that
the resource phase is responsible for managing the entire response instead of just a fragment of the response.

