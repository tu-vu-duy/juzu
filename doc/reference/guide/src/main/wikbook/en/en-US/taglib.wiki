A tag library is an essential component of a templating system, allowing to enrich a templating with encapsulated programmable
logic.

{{important}}
Juzu does not yet allow application to define their own tags, it will be added a a new feature in a future version.
{{/important}}

= Taglib syntax =

Like most taglib syntaxes, Juzu provides two syntaxes for invoking a tag:

{{example title="Start and end tag syntax"}}
{{code}}
#{foo}bar#{/foo}
{{/code}}
{{/example}}

The start/end syntax opens the tag with ###{foo}## and ends it with ###{/foo}##.

A tag can also be empty:

{{example title="Empty tag syntax"}}
{{code}}
#{foo/}
{{/code}}
{{/example}}

A tag can also be invoked empty with the ###{foo/}## syntax.

= Include tag =

The //include// tag simply includes a template inside the current template. The inclusion is dynamic and not static, meaning
 that the content of the included template is not //inserted// in the calling template, instead when inclusion is performed
 the control is passed to the included template.

{{example title="The include tag"}}
{{code}}
#{include path=dispatched.gtmpl/}
{{/code}}
{{/example}}

The //path// attribute determines the template to include, the path value is relative to the templates package.

= Decorate / Insert tag =

The //decorate// tag allows the content of the decorating template to wrap the content of the template invoking the tag.
 The //insert// tag should be used in the decorating template to specify the place where to insert the markup produced
 by the template to decorate.

{{example title="The wrapped template"}}
{{code}}
#{decorate path=box.gtmpl/}
{{/code}}
{{/example}}

{{example title="The decoraring template"}}
{{code}}
<div style="border: 1px solid black">
#{insert/}
</div>
{{/code}}
{{/example}}

= Title tag =

The //title// tag specifies a title to insert in the ##juzu.Response.Render## object the template will produce.

{{example title="Setting the title"}}
{{code}}
#{title value=Home/}
{{/code}}
{{/example}}

= Param tag =

The //param// tag enhances the type safety of templates, allowing to declare parameters for executing a template. When
such a parameter is declared, the generated template class companion will have a fluent parameter for setting the
value of the parameter:

{{example title="Declaring a template parameter"}}
{{code}}
#{param name=color/}
{{/code}}
{{/example}}

{{example title="Using the template parameter"}}
{{java}}
@Inject my.templates.index index;

@View
public void index() {
  index.with().color("red").render();
}
{{/java}}
{{/example}}
